/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MainInterface extends utils.Interface {
  functions: {
    "collections(uint256)": FunctionFragment;
    "createCollection(string,string)": FunctionFragment;
    "createNewCard(uint256,string,address)": FunctionFragment;
    "getAllCollections()": FunctionFragment;
    "getAttribute(address)": FunctionFragment;
    "getCardMetadata(uint256,uint256)": FunctionFragment;
    "transferCard(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collections"
      | "createCollection"
      | "createNewCard"
      | "getAllCollections"
      | "getAttribute"
      | "getCardMetadata"
      | "transferCard"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collections",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewCard",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttribute",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardMetadata",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCard",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCard",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Main extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewCard(
      collectionId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllCollections(overrides?: CallOverrides): Promise<[string[]]>;

    getAttribute(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    getCardMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferCard(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collections(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createCollection(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewCard(
    collectionId: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllCollections(overrides?: CallOverrides): Promise<string[]>;

  getAttribute(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  getCardMetadata(
    tokenId: PromiseOrValue<BigNumberish>,
    collectionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferCard(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    collectionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewCard(
      collectionId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllCollections(overrides?: CallOverrides): Promise<string[]>;

    getAttribute(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    getCardMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferCard(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewCard(
      collectionId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getAttribute(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCardMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferCard(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewCard(
      collectionId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttribute(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCardMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferCard(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      collectionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
