/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kmp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;

public class App {

    public static final String RESET = "\u001B[0m";
    public static final String RED = "\u001B[31m";
    public static final String GREEN = "\u001B[32m";
    public static final String YELLOW = "\u001B[33m";
    public static final String BLUE = "\u001B[34m";
    public static final String KMP = null;
    public static String BookName = "";
    public static Object search;

    public static void main(String[] args) throws IOException {
        // Affichage d'un dessin ASCII
        String dessin = " _______ \n" +
                " / \\ \n" +
                " /_________\\ \n" +
                "| Welcome |\n" +
                " \\_________/ ";

        // Affichage du dessin et du message d'accueil
        System.out.println(dessin);
        System.out.println("Bienvenue dans Mon Programme !");
        System.out.println("Veuillez suivre les instructions ci-dessous :");
        Scanner scanner = new Scanner(System.in);
        System.out.print("Entrez le nom du livre : ");
        BookName = scanner.nextLine();
        String _BookName = BookName.replace(" ", "%20");
        System.out.print("Vous cherchez quel mot dans ce text : ");
        String Text = scanner.nextLine();
        System.out.println("Vous souhaitez faire vos recherches en local ou sur le site  http://www.gutenberg.org/:");
        System.out.println("En local. Option A");
        System.out.println("Sur le site. Option B");
        boolean choixValide = false;
        int choix;
        while (!choixValide) {
            System.out.print("Entrez le numéro de votre choix : ");

            if (scanner.hasNextInt()) {
                choix = scanner.nextInt();

                if (choix == 1) {
                    choixValide = true;
                    searchInLocalFile(Text, _BookName, 1, "TestName");
                } else if (choix == 2) {
                    choixValide = true;
                    HttpRequest(Text, _BookName, 1, "TestName");
                } else {
                    System.out.println("Choix invalide. Veuillez choisir 1 ou 2.");
                }
            } else {
                System.out.println("Entrée invalide. Veuillez entrer un numéro.");
                scanner.next(); // Ignorer l'entrée incorrecte
            }
        }
    }

    private static int[] LPSArray(String pattern, String text) {
        int[] lps = new int[pattern.length()];
        int len = 0;
        int i = 0;
        while (i < pattern.length()) {
            if (pattern.charAt(i) == text.charAt(len)) {
                if (len < text.length()) {
                    len++;
                    lps[i] = len;
                }
                if (len == text.length()) {
                    lps[i] = len++;
                    len = 0;
                }
                i++;
                if (len > text.length()) {
                    len = 0;
                }

            } else {
                lps[i] = 0;
                len = 0;
                i++;
            }
        }
        return lps;
    }

    public static Data HttpRequest(String Text, String Livre, int ID, String TestName)
            throws UnsupportedEncodingException, IOException {

        String _BookName = Livre.replace(" ", "%20");
        BufferedReader reader = RequestDataUrl(
                "https://www.gutenberg.org/ebooks/search/?query=" + _BookName);
        int indexOfBook = GetData(reader, "ebooks/", _BookName);
        BufferedReader _reader = RequestDataUrl(
                "https://www.gutenberg.org/cache/epub/" + indexOfBook + "/pg" +
                        indexOfBook + ".txt");
        long startTime = System.nanoTime();
        GetFile(Text, _reader, _BookName);
        long endTime = System.nanoTime();
        Data data = new Data(startTime, endTime, ID, TestName);
        // Enregistrez l'objet JSON dans un fichier
        return data;
    }

    // public static void WriteInJsonFile(List<Data> data, String TestName) {
    // JSONArray jsonArray = new JSONArray();
    // JSONObject finalOutput = new JSONObject();
    // try {
    // for (Data _data : data) {

    // JSONObject dataJson = new JSONObject();
    // int ID = (int) _data.getId();
    // long Duration = _data.getDuration();
    // dataJson.put("ID", ID);
    // dataJson.put("Duration", Duration);
    // jsonArray.add(dataJson);

    // }
    // } catch (Exception ex) {
    // System.out.println("Exception : " + ex.toString());
    // }
    // try (FileWriter file = new FileWriter("data.json", true)) {
    // // We can write any JSONArray or JSONObject instance to the file
    // finalOutput.put(TestName, jsonArray);
    // file.write(finalOutput.toJSONString());
    // file.flush();

    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // }
    public static void WriteInYAMLFile(List<Data> data) {
        try {
            // Créez un objet ObjectMapper pour la sérialisation YAML
            ObjectMapper objectMapper = new ObjectMapper(new YAMLFactory());

            // Créez une liste pour stocker les objets de données
            List<Map<String, Object>> dataList = new ArrayList<>();

            // Remplissez la liste avec les objets de données
            for (Data _data : data) {
                Map<String, Object> testData = new LinkedHashMap<>();
                testData.put("testname", _data.getTestName());
                testData.put("id", _data.getId());
                testData.put("duration", _data.getDuration());
                dataList.add(testData);
            }

            // Écrivez la liste complète dans le fichier YAML
            try (FileWriter file = new FileWriter("data.yaml")) {
                objectMapper.writeValue(file, dataList);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (Exception ex) {
            System.out.println("Exception : " + ex.toString());
        }
    }

    public static int search(String pattern, String text, int indexLine, boolean Result_To_Display, String BookName) {
        int[] lps = LPSArray(pattern, text);
        int x = 0;
        for (int i = 0; i < lps.length; i++) {
            if (text.length() == (int) Array.get(lps, i)) {
                x = i + 1 - text.length();
                if (Result_To_Display) {
                    // System.out.println(
                    // "Votre Text : " + BLUE + text + " ..." + RESET + "\nSe trouve à la ligne : "
                    // + YELLOW
                    // + x
                    // + RESET + "\nA l'index : " + YELLOW +
                    // indexLine + RESET + "\nDu plan text de votre livre : " + GREEN + BookName
                    // + RESET);
                    indexLine++;
                }
            }
        }
        return x;
    }

    public static Data searchInLocalFile(String text, String LivreFile, int ID, String TestName) {
        long startTime = System.nanoTime();
        Data data = new Data();
        try {
            int indexLine = 0;
            String filePath = LivreFile;
            File file = new File(filePath);
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                // Process the line here (e.g., print it)
                int[] lps = LPSArray(line, text);
                int x = 0;
                indexLine++;
                for (int i = 0; i < lps.length; i++) {
                    if (text.length() == (int) Array.get(lps, i)) {
                        x = i + 1 - text.length();
                        System.out.println(
                                "Votre Text : " + BLUE + text + " ..." + RESET + "\nSe trouve à la ligne : "
                                        + YELLOW
                                        + x
                                        + RESET + "\nA l'index : " + YELLOW +
                                        indexLine + RESET + "\nDu plan text de votre livre : " + GREEN + LivreFile
                                        + RESET);
                    }
                }
            }
            br.close();
            long endTime = System.nanoTime();
            data = new Data(startTime, endTime, ID, TestName);

        } catch (IOException e) {
            e.printStackTrace();
        }
        return data;
    }

    public static BufferedReader RequestDataUrl(String adresse)
            throws UnsupportedEncodingException, IOException {
        URL url = new URL(adresse);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
        return reader;
    }

    public static String GetFile(String text, BufferedReader reader, String bookName)
            throws UnsupportedEncodingException, IOException {
        int i = 0;
        try (reader) {
            for (String line; (line = reader.readLine()) != null;) {
                i++;
                search(line, text, i, true, bookName);
            }
        }
        return "good";
    }

    public static Integer GetData(BufferedReader reader, String text, String bookName)
            throws UnsupportedEncodingException, IOException {
        int index = 0;
        int i = 0;
        try (reader) {
            for (String line; (line = reader.readLine()) != null;) {
                i++;
                int x = search(line, text, i, false, bookName);
                if (x != 0) {
                    try {
                        index = Integer.parseInt(line.substring(x + text.length(), x + text.length() + 5));
                        break;
                    } catch (Exception e) {
                    }
                }
            }
        }
        return index;
    }

}
